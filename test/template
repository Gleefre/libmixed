#include "common.h"

int main(int argc, char **argv){
  int exit = 1;
  size_t samples = 1024;
  size_t samplerate = 44100;
  struct mixed_mixer mixer = {0};
  struct out *out = 0;

  signal(SIGINT, interrupt_handler);

  if(!load_out_segment(samples, &out)){
    goto cleanup;
  }

  if(!mixed_make_segment_(...)){
    fprintf(stderr, "Failed to create segments: %s\n", mixed_error_string(-1));
    goto cleanup;
  }

  if(!mixed_segment_set_out(MIXED_BUFFER, MIXED_MONO, &out->left, ...)){
    fprintf(stderr, "Failed to attach buffers to segments: %s\n", mixed_error_string(-1));
    goto cleanup;
  }

  if(!mixed_mixer_add(..., &mixer) ||
     !mixed_mixer_add(&out->segment, &mixer)){
    fprintf(stderr, "Failed to assemble mixer: %s\n", mixed_error_string(-1));
    goto cleanup;
  }

  mixed_mixer_start(&mixer);

  size_t played;
  uint8_t samplesize = mixed_samplesize(out->channel.encoding);
  do{
    if(!mixed_mixer_mix(samples, &mixer)){
      fprintf(stderr, "Failure during mixing: %s\n", mixed_error_string(-1));
      goto cleanup;
    }
    
    played = out123_play(out->handle, out->channel.data, out->channel.size);
    if(played < samples*samplesize){
      fprintf(stderr, "Warning: device not catching up with input (%i vs %i)\n", played, samples);
    }
  }while(!interrupted);
  
  mixed_mixer_end(&mixer);

  exit = 0;

 cleanup:
  mixed_free_mixer(&mixer);
  free_out(out);
  
  return exit;
}
